// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Free from "../Control.Monad.Free/index.js";
import * as Control_Monad_State_Class from "../Control.Monad.State.Class/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Effect_Unsafe from "../Effect.Unsafe/index.js";
import * as Halogen_Component from "../Halogen.Component/index.js";
import * as Halogen_HTML_Core from "../Halogen.HTML.Core/index.js";
import * as Halogen_Hooks_Hook from "../Halogen.Hooks.Hook/index.js";
import * as Halogen_Hooks_Internal_Eval from "../Halogen.Hooks.Internal.Eval/index.js";
import * as Halogen_Hooks_Internal_Eval_Types from "../Halogen.Hooks.Internal.Eval.Types/index.js";
import * as Halogen_Query_HalogenM from "../Halogen.Query.HalogenM/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(
  Halogen_Query_HalogenM.bindHalogenM
);
var get = /* #__PURE__ */ Control_Monad_State_Class.get(
  Halogen_Query_HalogenM.monadStateHalogenM
);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(
  Halogen_Query_HalogenM.bindHalogenM
);
var modify_ = /* #__PURE__ */ Control_Monad_State_Class.modify_(
  Halogen_Query_HalogenM.monadStateHalogenM
);
var over = /* #__PURE__ */ Data_Newtype.over()();
var pure = /* #__PURE__ */ Control_Applicative.pure(
  Halogen_Query_HalogenM.applicativeHalogenM
);
var memoComponent = function (eqInput) {
  return function (inputHookFn) {
    var initialState = function (input) {
      return {
        result: Halogen_HTML_Core.text(""),
        stateRef: Effect_Unsafe.unsafePerformEffect(
          Effect_Ref["new"]({
            input: input,
            componentRef: {},
            queryFn: Data_Maybe.Nothing.value,
            stateCells: {
              queue: [],
              index: 0
            },
            effectCells: {
              queue: [],
              index: 0
            },
            memoCells: {
              queue: [],
              index: 0
            },
            refCells: {
              queue: [],
              index: 0
            },
            evalQueue: [],
            stateDirty: false
          })
        )
      };
    };
    var slotToken = {};
    var queryToken = {};
    var outputToken = {};
    var hookFn = inputHookFn({
      queryToken: queryToken,
      slotToken: slotToken,
      outputToken: outputToken
    });
    var evalHook = function (reason) {
      return bind(get)(function (v) {
        var $$eval = Halogen_Hooks_Internal_Eval.evalHook(
          Halogen_Hooks_Internal_Eval.evalHookM
        )(evalHook)(reason)(v.stateRef);
        var v1 = Effect_Unsafe.unsafePerformEffect(Effect_Ref.read(v.stateRef));
        var hookF = Halogen_Hooks_Hook.unsafeFromHook(hookFn(v1.input));
        return bind(Control_Monad_Free.substFree($$eval)(hookF))(function (a) {
          return discard(
            modify_(
              over(Halogen_Hooks_Internal_Eval_Types.HookState)(function (v2) {
                return {
                  stateRef: v2.stateRef,
                  result: a
                };
              })
            )
          )(function () {
            return pure(a);
          });
        });
      });
    };
    return Halogen_Component.mkComponent({
      initialState: initialState,
      render: function (v) {
        return v.result;
      },
      eval: (function () {
        var $21 =
          Halogen_Hooks_Internal_Eval_Types.toHalogenM(slotToken)(outputToken);
        var $22 = Halogen_Hooks_Internal_Eval.mkEval(eqInput)(
          Halogen_Hooks_Internal_Eval.evalHookM
        )(evalHook);
        return function ($23) {
          return $21($22($23));
        };
      })()
    });
  };
};
var component = /* #__PURE__ */ memoComponent(function (v) {
  return function (v1) {
    return false;
  };
});
export { component, memoComponent };
