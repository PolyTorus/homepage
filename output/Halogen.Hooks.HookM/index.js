// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Applicative_Free from "../Control.Applicative.Free/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Free from "../Control.Monad.Free/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_Rec_Class from "../Control.Monad.Rec.Class/index.js";
import * as Control_Monad_Writer_Class from "../Control.Monad.Writer.Class/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Halogen_Data_Slot from "../Halogen.Data.Slot/index.js";
import * as Halogen_Hooks_Internal_Types from "../Halogen.Hooks.Internal.Types/index.js";
import * as Halogen_Query from "../Halogen.Query/index.js";
import * as Halogen_Query_ChildQuery from "../Halogen.Query.ChildQuery/index.js";
import * as Web_HTML_HTMLElement from "../Web.HTML.HTMLElement/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorFn);
var map1 = /* #__PURE__ */ Data_Functor.map(
  Halogen_Query_ChildQuery.functorChildQuery
);
var identity = /* #__PURE__ */ Control_Category.identity(
  Control_Category.categoryFn
);
var foldrWithIndex = /* #__PURE__ */ Data_FoldableWithIndex.foldrWithIndex(
  Data_Map_Internal.foldableWithIndexMap
);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(
  Data_Map_Internal.traversableMap
);
var slots = /* #__PURE__ */ Halogen_Data_Slot.slots();
var lookup = /* #__PURE__ */ Halogen_Data_Slot.lookup();
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(
  Data_Maybe.bindMaybe
);
var HookAp = function (x) {
  return x;
};
var HookM = function (x) {
  return x;
};
var Modify = /* #__PURE__ */ (function () {
  function Modify(value0, value1, value2) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }
  Modify.create = function (value0) {
    return function (value1) {
      return function (value2) {
        return new Modify(value0, value1, value2);
      };
    };
  };
  return Modify;
})();
var Subscribe = /* #__PURE__ */ (function () {
  function Subscribe(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  Subscribe.create = function (value0) {
    return function (value1) {
      return new Subscribe(value0, value1);
    };
  };
  return Subscribe;
})();
var Unsubscribe = /* #__PURE__ */ (function () {
  function Unsubscribe(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  Unsubscribe.create = function (value0) {
    return function (value1) {
      return new Unsubscribe(value0, value1);
    };
  };
  return Unsubscribe;
})();
var Lift = /* #__PURE__ */ (function () {
  function Lift(value0) {
    this.value0 = value0;
  }
  Lift.create = function (value0) {
    return new Lift(value0);
  };
  return Lift;
})();
var ChildQuery = /* #__PURE__ */ (function () {
  function ChildQuery(value0) {
    this.value0 = value0;
  }
  ChildQuery.create = function (value0) {
    return new ChildQuery(value0);
  };
  return ChildQuery;
})();
var Raise = /* #__PURE__ */ (function () {
  function Raise(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  Raise.create = function (value0) {
    return function (value1) {
      return new Raise(value0, value1);
    };
  };
  return Raise;
})();
var Par = /* #__PURE__ */ (function () {
  function Par(value0) {
    this.value0 = value0;
  }
  Par.create = function (value0) {
    return new Par(value0);
  };
  return Par;
})();
var Fork = /* #__PURE__ */ (function () {
  function Fork(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  Fork.create = function (value0) {
    return function (value1) {
      return new Fork(value0, value1);
    };
  };
  return Fork;
})();
var Kill = /* #__PURE__ */ (function () {
  function Kill(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  Kill.create = function (value0) {
    return function (value1) {
      return new Kill(value0, value1);
    };
  };
  return Kill;
})();
var GetRef = /* #__PURE__ */ (function () {
  function GetRef(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  GetRef.create = function (value0) {
    return function (value1) {
      return new GetRef(value0, value1);
    };
  };
  return GetRef;
})();
var semigroupHookM = function (dictSemigroup) {
  return Control_Monad_Free.semigroupFree(dictSemigroup);
};
var newtypeHookAp_ = {
  Coercible0: function () {
    return undefined;
  }
};
var monoidHookM = function (dictMonoid) {
  return Control_Monad_Free.monoidFree(dictMonoid);
};
var monadTransHookM = {
  lift: function (dictMonad) {
    return function ($129) {
      return HookM(Control_Monad_Free.liftF(Lift.create($129)));
    };
  }
};
var monadHookM = Control_Monad_Free.freeMonad;
var monadTellHookM = function (dictMonadTell) {
  var Semigroup0 = dictMonadTell.Semigroup0();
  return {
    tell: (function () {
      var $130 = Control_Monad_Writer_Class.tell(dictMonadTell);
      return function ($131) {
        return HookM(Control_Monad_Free.liftF(Lift.create($130($131))));
      };
    })(),
    Semigroup0: function () {
      return Semigroup0;
    },
    Monad1: function () {
      return monadHookM;
    }
  };
};
var monadThrowHookM = function (dictMonadThrow) {
  return {
    throwError: (function () {
      var $132 = Control_Monad_Error_Class.throwError(dictMonadThrow);
      return function ($133) {
        return HookM(Control_Monad_Free.liftF(Lift.create($132($133))));
      };
    })(),
    Monad0: function () {
      return monadHookM;
    }
  };
};
var monadEffectHookM = function (dictMonadEffect) {
  return {
    liftEffect: (function () {
      var $134 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($135) {
        return HookM(Control_Monad_Free.liftF(Lift.create($134($135))));
      };
    })(),
    Monad0: function () {
      return monadHookM;
    }
  };
};
var monadAskHookM = function (dictMonadAsk) {
  return {
    ask: Control_Monad_Free.liftF(
      new Lift(Control_Monad_Reader_Class.ask(dictMonadAsk))
    ),
    Monad0: function () {
      return monadHookM;
    }
  };
};
var monadAffHookM = function (dictMonadAff) {
  var monadEffectHookM1 = monadEffectHookM(dictMonadAff.MonadEffect0());
  return {
    liftAff: (function () {
      var $136 = Effect_Aff_Class.liftAff(dictMonadAff);
      return function ($137) {
        return HookM(Control_Monad_Free.liftF(Lift.create($136($137))));
      };
    })(),
    MonadEffect0: function () {
      return monadEffectHookM1;
    }
  };
};
var functorHookM = Control_Monad_Free.freeFunctor;
var $$void = /* #__PURE__ */ Data_Functor["void"](functorHookM);
var map2 = /* #__PURE__ */ Data_Functor.map(functorHookM);
var functorHookAp = Control_Applicative_Free.functorFreeAp;
var map3 = /* #__PURE__ */ Data_Functor.map(functorHookAp);
var functorHookF = function (dictFunctor) {
  var map4 = Data_Functor.map(dictFunctor);
  return {
    map: function (f) {
      return function (m) {
        if (m instanceof Modify) {
          return new Modify(m.value0, m.value1, map(f)(m.value2));
        }
        if (m instanceof Subscribe) {
          return new Subscribe(m.value0, map(f)(m.value1));
        }
        if (m instanceof Unsubscribe) {
          return new Unsubscribe(m.value0, f(m.value1));
        }
        if (m instanceof Lift) {
          return new Lift(map4(f)(m.value0));
        }
        if (m instanceof ChildQuery) {
          return new ChildQuery(map1(f)(m.value0));
        }
        if (m instanceof Raise) {
          return new Raise(m.value0, f(m.value1));
        }
        if (m instanceof Par) {
          return new Par(map3(f)(m.value0));
        }
        if (m instanceof Fork) {
          return new Fork(m.value0, map(f)(m.value1));
        }
        if (m instanceof Kill) {
          return new Kill(m.value0, f(m.value1));
        }
        if (m instanceof GetRef) {
          return new GetRef(m.value0, map(f)(m.value1));
        }
        throw new Error(
          "Failed pattern match at Halogen.Hooks.HookM (line 0, column 0 - line 0, column 0): " +
            [m.constructor.name]
        );
      };
    }
  };
};
var bindHookM = Control_Monad_Free.freeBind;
var bind = /* #__PURE__ */ Control_Bind.bind(bindHookM);
var applyHookM = Control_Monad_Free.freeApply;
var applyHookAp = Control_Applicative_Free.applyFreeAp;
var parallelHookApHookM = {
  parallel: function ($138) {
    return HookAp(Control_Applicative_Free.liftFreeAp($138));
  },
  sequential: function ($139) {
    return HookM(Control_Monad_Free.liftF(Par.create($139)));
  },
  Apply0: function () {
    return applyHookM;
  },
  Apply1: function () {
    return applyHookAp;
  }
};
var applicativeHookM = Control_Monad_Free.freeApplicative;
var pure = /* #__PURE__ */ Control_Applicative.pure(applicativeHookM);
var monadRecHookM = {
  tailRecM: function (k) {
    return function (a) {
      return bind(k(a))(function (v) {
        if (v instanceof Control_Monad_Rec_Class.Loop) {
          return Control_Monad_Rec_Class.tailRecM(monadRecHookM)(k)(v.value0);
        }
        if (v instanceof Control_Monad_Rec_Class.Done) {
          return pure(v.value0);
        }
        throw new Error(
          "Failed pattern match at Halogen.Hooks.HookM (line 80, column 26 - line 82, column 21): " +
            [v.constructor.name]
        );
      });
    };
  },
  Monad0: function () {
    return monadHookM;
  }
};
var applicativeHookAp = Control_Applicative_Free.applicativeFreeAp;
var unsubscribe = function (sid) {
  return Control_Monad_Free.liftF(new Unsubscribe(sid, Data_Unit.unit));
};
var subscribe$prime = function (esc) {
  return Control_Monad_Free.liftF(
    new Subscribe(esc, Data_Function["const"](Data_Unit.unit))
  );
};
var subscribe = function (es) {
  return Control_Monad_Free.liftF(
    new Subscribe(function (v) {
      return es;
    }, identity)
  );
};
var raise = function (v) {
  return function (o) {
    return Control_Monad_Free.liftF(
      new Raise(Halogen_Hooks_Internal_Types.toOutputValue(o), Data_Unit.unit)
    );
  };
};
var queryAll = function () {
  return function (dictIsSymbol) {
    var slots1 = slots(dictIsSymbol);
    return function (dictOrd) {
      var slots2 = slots1(dictOrd);
      return function (v) {
        return function (label) {
          return function (q) {
            var catMapMaybes = function (dictOrd1) {
              var insert = Data_Map_Internal.insert(dictOrd1);
              return foldrWithIndex(function (k) {
                return function (v1) {
                  return function (acc) {
                    return Data_Maybe.maybe(acc)(
                      Data_Function.flip(insert(k))(acc)
                    )(v1);
                  };
                };
              })(Data_Map_Internal.empty);
            };
            var catMapMaybes1 = catMapMaybes(dictOrd);
            return Control_Monad_Free.liftF(
              new ChildQuery(
                Halogen_Query_ChildQuery.mkChildQueryBox(
                  new Halogen_Query_ChildQuery.ChildQuery(
                    function (dictApplicative) {
                      var map4 = Data_Functor.map(
                        dictApplicative.Apply0().Functor0()
                      );
                      var traverse1 = traverse(dictApplicative);
                      return function (k) {
                        var $140 = map4(catMapMaybes1);
                        var $141 = traverse1(k);
                        var $142 = slots2(label);
                        return function ($143) {
                          return $140($141($142($143)));
                        };
                      };
                    },
                    q,
                    identity
                  )
                )
              )
            );
          };
        };
      };
    };
  };
};
var query = function () {
  return function (dictIsSymbol) {
    var lookup1 = lookup(dictIsSymbol);
    return function (dictOrd) {
      var lookup2 = lookup1(dictOrd);
      return function (v) {
        return function (label) {
          return function (p) {
            return function (q) {
              return Control_Monad_Free.liftF(
                new ChildQuery(
                  Halogen_Query_ChildQuery.mkChildQueryBox(
                    new Halogen_Query_ChildQuery.ChildQuery(
                      function (dictApplicative) {
                        var pure1 = Control_Applicative.pure(dictApplicative);
                        return function (k) {
                          var $144 = Data_Maybe.maybe(
                            pure1(Data_Maybe.Nothing.value)
                          )(k);
                          var $145 = lookup2(label)(p);
                          return function ($146) {
                            return $144($145($146));
                          };
                        };
                      },
                      q,
                      identity
                    )
                  )
                )
              );
            };
          };
        };
      };
    };
  };
};
var query1 = /* #__PURE__ */ query();
var request = function () {
  return function (dictIsSymbol) {
    var query2 = query1(dictIsSymbol);
    return function (dictOrd) {
      var query3 = query2(dictOrd);
      return function (slotToken) {
        return function (label) {
          return function (slot) {
            return function (req) {
              return query3(slotToken)(label)(slot)(
                Halogen_Query.mkRequest(req)
              );
            };
          };
        };
      };
    };
  };
};
var tell = function () {
  return function (dictIsSymbol) {
    var query2 = query1(dictIsSymbol);
    return function (dictOrd) {
      var query3 = query2(dictOrd);
      return function (slotToken) {
        return function (label) {
          return function (slot) {
            return function (req) {
              return $$void(
                query3(slotToken)(label)(slot)(Halogen_Query.mkTell(req))
              );
            };
          };
        };
      };
    };
  };
};
var modify = function (identifier) {
  return function (f) {
    var f$prime = function ($147) {
      return Halogen_Hooks_Internal_Types.toStateValue(
        f(Halogen_Hooks_Internal_Types.fromStateValue($147))
      );
    };
    return Control_Monad_Free.liftF(
      new Modify(
        identifier,
        f$prime,
        Halogen_Hooks_Internal_Types.fromStateValue
      )
    );
  };
};
var modify_ = function (identifier) {
  var $148 = map2(Data_Function["const"](Data_Unit.unit));
  var $149 = modify(identifier);
  return function ($150) {
    return $148($149($150));
  };
};
var put = function (identifier) {
  return function (state) {
    return modify_(identifier)(Data_Function["const"](state));
  };
};
var kill = function (fid) {
  return Control_Monad_Free.liftF(new Kill(fid, Data_Unit.unit));
};
var getRef = function (p) {
  return Control_Monad_Free.liftF(new GetRef(p, identity));
};
var getHTMLElementRef = /* #__PURE__ */ (function () {
  var $151 = map2(function (v) {
    return bindFlipped(Web_HTML_HTMLElement.fromElement)(v);
  });
  return function ($152) {
    return $151(getRef($152));
  };
})();
var get = function (identifier) {
  return modify(identifier)(identity);
};
var fork = function (fn) {
  return Control_Monad_Free.liftF(new Fork(fn, identity));
};
export {
  Modify,
  Subscribe,
  Unsubscribe,
  Lift,
  ChildQuery,
  Raise,
  Par,
  Fork,
  Kill,
  GetRef,
  HookM,
  HookAp,
  get,
  modify_,
  modify,
  put,
  raise,
  query,
  request,
  tell,
  queryAll,
  subscribe,
  subscribe$prime,
  unsubscribe,
  fork,
  kill,
  getRef,
  getHTMLElementRef,
  functorHookF,
  functorHookM,
  applyHookM,
  applicativeHookM,
  bindHookM,
  monadHookM,
  semigroupHookM,
  monoidHookM,
  monadEffectHookM,
  monadAffHookM,
  monadTransHookM,
  monadRecHookM,
  monadAskHookM,
  monadTellHookM,
  monadThrowHookM,
  newtypeHookAp_,
  functorHookAp,
  applyHookAp,
  applicativeHookAp,
  parallelHookApHookM
};
