// Generated by purs version 0.15.15
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Halogen_Hooks_Component from "../Halogen.Hooks.Component/index.js";
import * as Halogen_Hooks_Hook from "../Halogen.Hooks.Hook/index.js";
import * as Halogen_Hooks_HookM from "../Halogen.Hooks.HookM/index.js";
import * as Halogen_Hooks_Internal_Types from "../Halogen.Hooks.Internal.Types/index.js";
import * as Halogen_Hooks_Internal_UseHookF from "../Halogen.Hooks.Internal.UseHookF/index.js";
import * as Halogen_Hooks_Types from "../Halogen.Hooks.Types/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
var wrap = function () {
  return Unsafe_Coerce.unsafeCoerce;
};
var useTickEffect = function (memos) {
  return function (fn) {
    return Halogen_Hooks_Hook.unsafeToHook(
      new Halogen_Hooks_Internal_UseHookF.UseEffect(
        new Data_Maybe.Just(memos),
        fn,
        Data_Unit.unit
      )
    );
  };
};
var useState = function (initialState) {
  var $$interface = function (v) {
    return new Data_Tuple.Tuple(
      Halogen_Hooks_Internal_Types.fromStateValue(v.value0),
      v.value1
    );
  };
  var initialState$prime =
    Halogen_Hooks_Internal_Types.toStateValue(initialState);
  return Halogen_Hooks_Hook.unsafeToHook(
    new Halogen_Hooks_Internal_UseHookF.UseState(
      initialState$prime,
      $$interface
    )
  );
};
var useRef = function (initialValue) {
  var $$interface = function (v) {
    return new Data_Tuple.Tuple(
      Halogen_Hooks_Internal_Types.fromRefValue(v.value0),
      v.value1
    );
  };
  var initialValue$prime =
    Halogen_Hooks_Internal_Types.toRefValue(initialValue);
  return Halogen_Hooks_Hook.unsafeToHook(
    new Halogen_Hooks_Internal_UseHookF.UseRef(initialValue$prime, $$interface)
  );
};
var useQuery = function (token) {
  return function (handler) {
    var handler$prime = function ($11) {
      return handler(Halogen_Hooks_Internal_Types.fromQueryValue($11));
    };
    return Halogen_Hooks_Hook.unsafeToHook(
      new Halogen_Hooks_Internal_UseHookF.UseQuery(
        token,
        handler$prime,
        Data_Unit.unit
      )
    );
  };
};
var useMemo = function (memos) {
  return function (fn) {
    var to = function ($12) {
      return Halogen_Hooks_Internal_Types.toMemoValue(fn($12));
    };
    return Halogen_Hooks_Hook.unsafeToHook(
      new Halogen_Hooks_Internal_UseHookF.UseMemo(
        memos,
        to,
        Halogen_Hooks_Internal_Types.fromMemoValue
      )
    );
  };
};
var useLifecycleEffect = function (fn) {
  return Halogen_Hooks_Hook.unsafeToHook(
    new Halogen_Hooks_Internal_UseHookF.UseEffect(
      Data_Maybe.Nothing.value,
      fn,
      Data_Unit.unit
    )
  );
};
var capturesWith = function (memosEq) {
  return function (memos) {
    return function (fn) {
      return fn(
        Halogen_Hooks_Internal_Types.toMemoValues(
          Halogen_Hooks_Internal_Types.toMemoValuesImpl({
            eq: memosEq,
            memos: memos
          })
        )
      );
    };
  };
};
var captures = function (dictEq) {
  var eq = Data_Eq.eq(dictEq);
  return function (memos) {
    return function (fn) {
      return fn(
        Halogen_Hooks_Internal_Types.toMemoValues(
          Halogen_Hooks_Internal_Types.toMemoValuesImpl({
            eq: eq,
            memos: memos
          })
        )
      );
    };
  };
};
export {
  useState,
  useLifecycleEffect,
  useTickEffect,
  useQuery,
  useMemo,
  useRef,
  captures,
  capturesWith,
  wrap
};
export { component, memoComponent } from "../Halogen.Hooks.Component/index.js";
export { bind, discard, pure } from "../Halogen.Hooks.Hook/index.js";
export {
  HookAp,
  ChildQuery,
  Fork,
  GetRef,
  Kill,
  Lift,
  Modify,
  Par,
  Raise,
  Subscribe,
  Unsubscribe,
  HookM,
  fork,
  get,
  getHTMLElementRef,
  getRef,
  kill,
  modify,
  modify_,
  put,
  query,
  queryAll,
  raise,
  request,
  subscribe,
  subscribe$prime,
  tell,
  unsubscribe
} from "../Halogen.Hooks.HookM/index.js";
